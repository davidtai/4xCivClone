// Generated by CoffeeScript 1.3.1
(function() {
  var Engine, MT, animationCache, global, seed, sharedSpriteFrameCache, sharedSpriteSheetCache, size, split, tileSize, worldSize,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  split = location.search.replace('?', '').split('&').map(function(val) {
    return val.split('=');
  });

  if (split[0] && split[0].length > 0 && split[0][0] === "seed") {
    seed = parseInt(split[0][1], 10);
  } else {
    seed = new Date().getTime();
  }

  $('body').append("<p>" + seed + "</p>");

  console.log("SEED:" + seed);

  MT = new MersenneTwister(seed);

  Math.random = function() {
    return MT.random.apply(MT, arguments);
  };

  global = this;

  this.Math.cbrt = function(x) {
    var sign;
    if (x === 0) {
      return 0;
    } else {
      sign = x > 0 ? 1 : -1;
      return sign * Math.pow(Math.abs(x), 1 / 3);
    }
  };

  animationCache = cc.AnimationCache.getInstance();

  sharedSpriteFrameCache = cc.SpriteFrameCache.getInstance();

  sharedSpriteSheetCache = cc.SpriteSheetJson.getInstance();

  size = 200;

  tileSize = new cc.Size(40 * config.screen.scale, 40 * config.screen.scale);

  worldSize = new cc.Size(tileSize.width * size, tileSize.height * size);

  this.Engine = Engine = (function(_super) {

    __extends(Engine, _super);

    Engine.name = 'Engine';

    function Engine() {
      return Engine.__super__.constructor.apply(this, arguments);
    }

    Engine.prototype.init = function() {
      var offset, options,
        _this = this;
      this.windowSize = cc.Director.getInstance().getWinSize();
      offset = cc.Node.create();
      offset.setPosition(new cc.Point(0, config.screen.height));
      offset.setScaleY(-1);
      options = {
        tileSize: tileSize,
        worldSize: worldSize,
        landPlateCount: 96,
        oceanPlateCount: 2,
        fractionLand: .4,
        fractionSubduction: .3,
        rainfallReductionRate: 3,
        maxTemperature: 100,
        minTemperature: -50
      };
      return Async.series(function() {
        return _this.world = new World(options);
      }, function() {
        _this.scroll = cc.Node.create();
        return offset.addChild(_this.scroll, 1);
      }, function() {
        var binSize, lazyLayer;
        binSize = new cc.Size(8000, 8000);
        _this.spatialHash = new SpatialHash({
          binSize: binSize,
          spaceSize: new cc.Size(16000, 8000),
          border: 1024
        });
        _this.world.createSprites(_this.scroll, _this.spatialHash);
        _this.addChild(offset);
        _this.setTouchEnabled(true);
        _this.setKeyboardEnabled(true);
        lazyLayer = new cc.LazyLayer();
        lazyLayer.addChild(cc.LayerColor.create(new cc.Color4B(0, 0, 0, 255), _this.windowSize.width, _this.windowSize.height));
        _this.addChild(lazyLayer);
        _this.sprites = [];
        _this.keyMap = {};
        return _this.ready = true;
      });
    };

    Engine.prototype.onKeyDown = function(e) {
      return this.keyMap[e] = true;
    };

    Engine.prototype.onKeyUp = function(e) {
      return this.keyMap[e] = false;
    };

    Engine.prototype.onTouchesEnded = function(pTouch, pEvent) {};

    Engine.prototype.update = function(dt) {
      var child, position, _i, _len, _ref;
      if (this.ready) {
        position = this.scroll.getPosition();
        if (this.keyMap[cc.KEY.left]) {
          position.x += Math.floor(800 * dt);
          if (position.x > 0) {
            position.x -= worldSize.width;
          }
        }
        if (this.keyMap[cc.KEY.right]) {
          position.x -= Math.floor(800 * dt);
          if (position.x < -2 * worldSize.width + this.windowSize.width) {
            position.x += worldSize.width;
          }
        }
        if (this.keyMap[cc.KEY.down]) {
          position.y -= Math.floor(800 * dt);
          if (position.y < -worldSize.height + this.windowSize.height) {
            position.y = -worldSize.height + this.windowSize.height;
          }
        }
        if (this.keyMap[cc.KEY.up]) {
          position.y += Math.floor(800 * dt);
          if (position.y > 0) {
            position.y = 0;
          }
        }
        this.spatialHash.setActiveBins(new cc.Rect(-position.x, -position.y, config.screen.width, config.screen.height));
        _ref = this.scroll.getChildren();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          child.update(dt);
        }
        return this.scroll.setPosition(position);
      }
    };

    return Engine;

  })(cc.Layer);

}).call(this);
