// Generated by CoffeeScript 1.10.0
(function() {
  var Overlay,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Overlay = Overlay = (function(superClass) {
    extend(Overlay, superClass);

    function Overlay() {
      return Overlay.__super__.constructor.apply(this, arguments);
    }

    Overlay.prototype.ctor = function(options1) {
      var ctx, i, j, overlayCanvas, ref, ref1, ref2, ref3, screenSize, x, y;
      this.options = options1;
      this.tileSize = options.tileSize;
      screenSize = options.screenSize;
      overlayCanvas = $('<canvas />')[0];
      overlayCanvas.width = Math.ceil(screenSize.width / this.tileSize.width) * this.tileSize.width + this.tileSize.width + this.tileSize.width;
      overlayCanvas.height = Math.ceil(screenSize.height / this.tileSize.height) * this.tileSize.height + this.tileSize.height + this.tileSize.height;
      ctx = overlayCanvas.getContext('2d');
      ctx.webkitImageSmoothingEnabled = false;
      ctx.mozImageSmoothingEnabled = false;
      ctx.imageSmoothingEnabled = false;
      ctx.oImageSmoothingEnabled = false;
      ctx.beginPath();
      ctx.strokeStyle = 'rgba(0,0,0,0.4)';
      ctx.lineWidth = 2;
      for (x = i = 0, ref = overlayCanvas.width, ref1 = this.tileSize.width; ref1 > 0 ? i < ref : i > ref; x = i += ref1) {
        ctx.moveTo(x, 0);
        ctx.lineTo(x, overlayCanvas.height);
      }
      for (y = j = 0, ref2 = overlayCanvas.height, ref3 = this.tileSize.height; ref3 > 0 ? j < ref2 : j > ref2; y = j += ref3) {
        ctx.moveTo(0, y);
        ctx.lineTo(overlayCanvas.width, y);
      }
      ctx.stroke();
      this.initWithTexture(overlayCanvas);
      this.parentSprite = options.parentSprite;
      return this.parentSprite.addChild(this);
    };

    Overlay.prototype.update = function(dt) {
      var position;
      position = this.parentSprite.getPosition();
      return this.setPosition(new cc.Point(-position.x + (position.x % this.tileSize.width), -position.y + (position.y % this.tileSize.height)));
    };

    return Overlay;

  })(cc.Sprite);

}).call(this);
