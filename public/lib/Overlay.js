// Generated by CoffeeScript 1.3.1
(function() {
  var Overlay,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  this.Overlay = Overlay = (function(_super) {

    __extends(Overlay, _super);

    Overlay.name = 'Overlay';

    function Overlay() {
      return Overlay.__super__.constructor.apply(this, arguments);
    }

    Overlay.prototype.ctor = function(options) {
      var ctx, overlayCanvas, screenSize, x, y, _i, _j, _ref, _ref1, _ref2, _ref3;
      this.options = options;
      this.tileSize = options.tileSize;
      screenSize = options.screenSize;
      overlayCanvas = $('<canvas />')[0];
      overlayCanvas.width = Math.ceil(screenSize.width / this.tileSize.width) * this.tileSize.width + this.tileSize.width + this.tileSize.width;
      overlayCanvas.height = Math.ceil(screenSize.height / this.tileSize.height) * this.tileSize.height + this.tileSize.height + this.tileSize.height;
      ctx = overlayCanvas.getContext('2d');
      ctx.webkitImageSmoothingEnabled = false;
      ctx.mozImageSmoothingEnabled = false;
      ctx.imageSmoothingEnabled = false;
      ctx.oImageSmoothingEnabled = false;
      ctx.beginPath();
      ctx.strokeStyle = 'rgba(0,0,0,0.4)';
      ctx.lineWidth = 2;
      for (x = _i = 0, _ref = overlayCanvas.width, _ref1 = this.tileSize.width; 0 <= _ref ? _i < _ref : _i > _ref; x = _i += _ref1) {
        ctx.moveTo(x, 0);
        ctx.lineTo(x, overlayCanvas.height);
      }
      for (y = _j = 0, _ref2 = overlayCanvas.height, _ref3 = this.tileSize.height; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; y = _j += _ref3) {
        ctx.moveTo(0, y);
        ctx.lineTo(overlayCanvas.width, y);
      }
      ctx.stroke();
      this.initWithTexture(overlayCanvas);
      this.parentSprite = options.parentSprite;
      return this.parentSprite.addChild(this);
    };

    Overlay.prototype.update = function(dt) {
      var position;
      position = this.parentSprite.getPosition();
      return this.setPosition(new cc.Point(-position.x + (position.x % this.tileSize.width), -position.y + (position.y % this.tileSize.height)));
    };

    return Overlay;

  })(cc.Sprite);

}).call(this);
